//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShaderSama {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ShaderSama.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 450
        ///
        ///layout(location = 0) out vec4 fsout_Color;
        ///
        ///layout(set = 0, binding = 0) uniform Params {
        ///    float iTime;
        ///    vec2 iResolution;
        ///};
        ///
        ///void main()
        ///{
        ///    vec2 uv = gl_FragCoord.xy / iResolution.xy;
        ///    fsout_Color = vec4(uv, 0.5 + 0.5 * sin(iTime), 1.0);
        ///}.
        /// </summary>
        internal static string Basic {
            get {
                return ResourceManager.GetString("Basic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 450
        ///
        ///layout(location = 0) out vec4 fsout_Color;
        ///
        ///layout(set = 0, binding = 0) uniform Params {
        ///    float iTime;
        ///    vec2 iResolution;
        ///};
        ///
        ///float sun(vec2 uv, float battery)
        ///{
        /// 	float val = smoothstep(0.3, 0.29, length(uv));
        /// 	float bloom = smoothstep(0.7, 0.0, length(uv));
        ///    float cut = 3.0 * sin((uv.y + iTime * 0.2 * (battery + 0.02)) * 100.0) 
        ///				+ clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);
        ///    cut = clamp(cut, 0.0, 1.0);
        ///    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;
        ///}
        ///
        ///floa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CyberFuji {
            get {
                return ResourceManager.GetString("CyberFuji", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 450
        ///
        ///layout(location = 0) out vec4 fsout_Color;
        ///
        ///layout(set = 0, binding = 0) uniform Params {
        ///    float iTime;
        ///    vec2 iResolution;
        ///};
        ///
        ///void main()
        ///{
        ///    vec2 uv = gl_FragCoord.xy / iResolution.xy;
        ///    vec2 p = uv * 2.0 - 1.0; // center the coordinates
        ///
        ///    float t = iTime * 0.5;
        ///
        ///    float r = 0.5 + 0.5 * sin(10.0 * p.x + t);
        ///    float g = 0.5 + 0.5 * sin(10.0 * p.y + t + 2.0);
        ///    float b = 0.5 + 0.5 * sin(10.0 * (p.x + p.y) + t + 4.0);
        ///
        ///    float wave = sin(10.0 * length(p) - t * 5.0);
        ///    wav [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LSD {
            get {
                return ResourceManager.GetString("LSD", resourceCulture);
            }
        }
    }
}
